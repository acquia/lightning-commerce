diff --git a/.DS_Store b/.DS_Store
new file mode 100644
index 000000000..ce7f9e2cb
Binary files /dev/null and b/.DS_Store differ
diff --git a/docroot/modules/contrib/simple_oauth/.DS_Store b/docroot/modules/contrib/simple_oauth/.DS_Store
new file mode 100644
index 000000000..5008ddfcf
Binary files /dev/null and b/docroot/modules/contrib/simple_oauth/.DS_Store differ
diff --git a/docroot/modules/contrib/simple_oauth/PATCHES.txt b/docroot/modules/contrib/simple_oauth/PATCHES.txt
deleted file mode 100644
index bc2cde644..000000000
--- a/docroot/modules/contrib/simple_oauth/PATCHES.txt
+++ /dev/null
@@ -1,7 +0,0 @@
-This file was automatically generated by Composer Patches (https://github.com/cweagans/composer-patches)
-Patches applied to this directory:
-
-2966590 - Undefined variable $client in TokenAuthUser::__construct()
-Source: https://www.drupal.org/files/issues/2018-04-27/2966590-3.patch
-
-
diff --git a/docroot/modules/contrib/simple_oauth/config/install/simple_oauth.settings.yml b/docroot/modules/contrib/simple_oauth/config/install/simple_oauth.settings.yml
index cb889010f..2ba294bf1 100644
--- a/docroot/modules/contrib/simple_oauth/config/install/simple_oauth.settings.yml
+++ b/docroot/modules/contrib/simple_oauth/config/install/simple_oauth.settings.yml
@@ -1,2 +1,3 @@
 access_token_expiration: 300
 refresh_token_expiration: 1209600
+remember_clients: true
diff --git a/docroot/modules/contrib/simple_oauth/config/schema/simple_oauth.schema.yml b/docroot/modules/contrib/simple_oauth/config/schema/simple_oauth.schema.yml
index b7fe8c7d8..aef2ecf9a 100644
--- a/docroot/modules/contrib/simple_oauth/config/schema/simple_oauth.schema.yml
+++ b/docroot/modules/contrib/simple_oauth/config/schema/simple_oauth.schema.yml
@@ -35,3 +35,6 @@ simple_oauth.settings:
       type: path
       label: 'Private Key'
       description: 'The path to the private file.'
+    remember_clients:
+      type: boolean
+      label: 'Remember clients'
diff --git a/docroot/modules/contrib/simple_oauth/simple_oauth.info.yml b/docroot/modules/contrib/simple_oauth/simple_oauth.info.yml
index c8809fa11..60d276137 100644
--- a/docroot/modules/contrib/simple_oauth/simple_oauth.info.yml
+++ b/docroot/modules/contrib/simple_oauth/simple_oauth.info.yml
@@ -9,8 +9,8 @@ dependencies:
   - serialization
   - consumers (>=8.x-1.0-beta3)
 
-# Information added by Drupal.org packaging script on 2018-04-20
-version: '8.x-3.6'
+# Information added by Drupal.org packaging script on 2018-05-04
+version: '8.x-3.8'
 core: '8.x'
 project: 'simple_oauth'
-datestamp: 1524208686
+datestamp: 1525410491
diff --git a/docroot/modules/contrib/simple_oauth/simple_oauth.module b/docroot/modules/contrib/simple_oauth/simple_oauth.module
index b769bba8a..1a1ba0059 100644
--- a/docroot/modules/contrib/simple_oauth/simple_oauth.module
+++ b/docroot/modules/contrib/simple_oauth/simple_oauth.module
@@ -110,7 +110,7 @@ function simple_oauth_form_consumer_form_alter(array &$form, FormStateInterface
   );
   $form['roles']['widget']['#description'] .= '<br>' . $recommendation_text;
   if (empty($form['roles']['widget']['#options'])) {
-    drupal_set_message($recommendation_text, 'error');
+    \Drupal::service('messenger')->addMessage($recommendation_text, 'error');
     $form['actions']['#disabled'] = TRUE;
   }
 
diff --git a/docroot/modules/contrib/simple_oauth/simple_oauth.services.yml b/docroot/modules/contrib/simple_oauth/simple_oauth.services.yml
index 7207f543f..650870b9c 100644
--- a/docroot/modules/contrib/simple_oauth/simple_oauth.services.yml
+++ b/docroot/modules/contrib/simple_oauth/simple_oauth.services.yml
@@ -67,3 +67,6 @@ services:
   simple_oauth.key.generator:
     class: Drupal\simple_oauth\Service\KeyGeneratorService
     arguments: ['@simple_oauth.filesystem']
+  simple_oauth.known_clients:
+    class: \Drupal\simple_oauth\KnownClientsRepository
+    arguments: ['@user.data']
diff --git a/docroot/modules/contrib/simple_oauth/simple_oauth_extras/simple_oauth_extras.info.yml b/docroot/modules/contrib/simple_oauth/simple_oauth_extras/simple_oauth_extras.info.yml
index 56d0652fe..3611cf69c 100644
--- a/docroot/modules/contrib/simple_oauth/simple_oauth_extras/simple_oauth_extras.info.yml
+++ b/docroot/modules/contrib/simple_oauth/simple_oauth_extras/simple_oauth_extras.info.yml
@@ -6,8 +6,8 @@ package: Authentication
 dependencies:
   - simple_oauth
 
-# Information added by Drupal.org packaging script on 2018-04-20
-version: '8.x-3.6'
+# Information added by Drupal.org packaging script on 2018-05-04
+version: '8.x-3.8'
 core: '8.x'
 project: 'simple_oauth'
-datestamp: 1524208686
+datestamp: 1525410491
diff --git a/docroot/modules/contrib/simple_oauth/simple_oauth_extras/src/Controller/Oauth2AuthorizeController.php b/docroot/modules/contrib/simple_oauth/simple_oauth_extras/src/Controller/Oauth2AuthorizeController.php
index 54cc13470..2fb02e75a 100644
--- a/docroot/modules/contrib/simple_oauth/simple_oauth_extras/src/Controller/Oauth2AuthorizeController.php
+++ b/docroot/modules/contrib/simple_oauth/simple_oauth_extras/src/Controller/Oauth2AuthorizeController.php
@@ -3,11 +3,14 @@
 namespace Drupal\simple_oauth_extras\Controller;
 
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Form\FormBuilderInterface;
+use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\Routing\TrustedRedirectResponse;
 use Drupal\Core\Url;
 use Drupal\simple_oauth\Entities\UserEntity;
+use Drupal\simple_oauth\KnownClientsRepositoryInterface;
 use Drupal\simple_oauth\Plugin\Oauth2GrantManagerInterface;
 use GuzzleHttp\Psr7\Response;
 use League\OAuth2\Server\Exception\OAuthServerException;
@@ -36,17 +39,50 @@ class Oauth2AuthorizeController extends ControllerBase {
    */
   protected $formBuilder;
 
+  /**
+   * The messenger service.
+   *
+   * @var \Drupal\Core\Messenger\MessengerInterface
+   */
+  protected $messenger;
+
+  /**
+   * The config factory.
+   *
+   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   */
+  protected $configFactory;
+
+  /**
+   * The known client repository service.
+   *
+   * @var \Drupal\simple_oauth\KnownClientsRepositoryInterface
+   */
+  protected $knownClientRepository;
+
   /**
    * Oauth2AuthorizeController construct.
    *
    * @param \Symfony\Bridge\PsrHttpMessage\HttpMessageFactoryInterface $message_factory
+   *   The PSR-7 converter.
    * @param \Drupal\simple_oauth\Plugin\Oauth2GrantManagerInterface $grant_manager
+   *   The plugin.manager.oauth2_grant.processor service.
    * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   *   The form builder.
+   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   *   The messenger service.
+   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   *   The config factory.
+   * @param \Drupal\simple_oauth\KnownClientsRepositoryInterface $known_clients_repository
+   *   The known client repository service.
    */
-  public function __construct(HttpMessageFactoryInterface $message_factory, Oauth2GrantManagerInterface $grant_manager, FormBuilderInterface $form_builder) {
+  public function __construct(HttpMessageFactoryInterface $message_factory, Oauth2GrantManagerInterface $grant_manager, FormBuilderInterface $form_builder, MessengerInterface $messenger, ConfigFactoryInterface $config_factory, KnownClientsRepositoryInterface $known_clients_repository) {
     $this->messageFactory = $message_factory;
     $this->grantManager = $grant_manager;
     $this->formBuilder = $form_builder;
+    $this->messenger = $messenger;
+    $this->configFactory = $config_factory;
+    $this->knownClientRepository = $known_clients_repository;
   }
 
   /**
@@ -56,7 +92,10 @@ public static function create(ContainerInterface $container) {
     return new static(
       $container->get('psr7.http_message_factory'),
       $container->get('plugin.manager.oauth2_grant.processor'),
-      $container->get('form_builder')
+      $container->get('form_builder'),
+      $container->get('messenger'),
+      $container->get('config.factory'),
+      $container->get('simple_oauth.known_clients')
     );
   }
 
@@ -94,8 +133,14 @@ public function authorize(Request $request) {
     $client_drupal_entity = reset($client_drupal_entities);
     $is_third_party = $client_drupal_entity->get('third_party')->value;
 
-    // Login user may skip the grant step if the client is not third party
-    if ($this->currentUser()->isAuthenticated() && !$is_third_party) {
+    $scopes = [];
+    if ($request->query->get('scope')) {
+      $scopes = explode(' ', $request->query->get('scope'));
+    }
+
+    // Login user may skip the grant step if the client is not third party or
+    // known.
+    if ($this->currentUser()->isAuthenticated() && !$is_third_party || $this->isKnownClient($client_uuid, $scopes)) {
       if ($request->get('response_type') == 'code') {
         $grant_type = 'code';
       }
@@ -111,7 +156,7 @@ public function authorize(Request $request) {
         $auth_request = $server->validateAuthorizationRequest($ps7_request);
       }
       catch (OAuthServerException $exception) {
-        drupal_set_message($this->t('Fatal error. Unable to get the authorization server.'));
+        $this->messenger->addMessage($this->t('Fatal error. Unable to get the authorization server.'));
         watchdog_exception('simple_oauth_extras', $exception);
         return RedirectResponse::create(Url::fromRoute('<front>')->toString());
       }
@@ -136,4 +181,22 @@ public function authorize(Request $request) {
     return $this->formBuilder->getForm('Drupal\simple_oauth_extras\Controller\Oauth2AuthorizeForm');
   }
 
+  /**
+   * Whether the client with the given scopes is known and already authorized.
+   *
+   * @param string $client_uuid
+   *   The client UUID.
+   * @param string[] $scopes
+   *   The list of scopes.
+   *
+   * @return bool
+   *   TRUE if the client is authorized, FALSE otherwise.
+   */
+  protected function isKnownClient($client_uuid, array $scopes) {
+    if (!$this->configFactory->get('simple_oauth.settings')->get('remember_clients')) {
+      return FALSE;
+    }
+    return $this->knownClientRepository->isAuthorized($this->currentUser()->id(), $client_uuid, $scopes);
+  }
+
 }
diff --git a/docroot/modules/contrib/simple_oauth/simple_oauth_extras/src/Controller/Oauth2AuthorizeForm.php b/docroot/modules/contrib/simple_oauth/simple_oauth_extras/src/Controller/Oauth2AuthorizeForm.php
index b2d10e486..1dad08e50 100644
--- a/docroot/modules/contrib/simple_oauth/simple_oauth_extras/src/Controller/Oauth2AuthorizeForm.php
+++ b/docroot/modules/contrib/simple_oauth/simple_oauth_extras/src/Controller/Oauth2AuthorizeForm.php
@@ -4,19 +4,25 @@
 
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Cache\CacheableMetadata;
+use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Routing\TrustedRedirectResponse;
 use Drupal\Core\Url;
 use Drupal\simple_oauth\Entities\UserEntity;
+use Drupal\simple_oauth\KnownClientsRepositoryInterface;
 use Drupal\simple_oauth\Plugin\Oauth2GrantManagerInterface;
 use GuzzleHttp\Psr7\Response;
+use League\OAuth2\Server\Entities\ScopeEntityInterface;
 use League\OAuth2\Server\Exception\OAuthServerException;
 use Symfony\Bridge\PsrHttpMessage\HttpFoundationFactoryInterface;
 use Symfony\Bridge\PsrHttpMessage\HttpMessageFactoryInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
+/**
+ * Authorize form.
+ */
 class Oauth2AuthorizeForm extends FormBase {
 
   /**
@@ -44,19 +50,43 @@ class Oauth2AuthorizeForm extends FormBase {
    */
   protected $grantManager;
 
+  /**
+   * The config factory.
+   *
+   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   */
+  protected $configFactory;
+
+  /**
+   * The known client repository service.
+   *
+   * @var \Drupal\simple_oauth\KnownClientsRepositoryInterface
+   */
+  protected $knownClientRepository;
+
   /**
    * Oauth2AuthorizeForm constructor.
    *
    * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   *   The entity type manager.
    * @param \Symfony\Bridge\PsrHttpMessage\HttpMessageFactoryInterface $message_factory
+   *   The message factory.
    * @param \Symfony\Bridge\PsrHttpMessage\HttpFoundationFactoryInterface $foundation_factory
+   *   The foundation factory.
    * @param \Drupal\simple_oauth\Plugin\Oauth2GrantManagerInterface $grant_manager
+   *   The grant manager.
+   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   *   The config factory.
+   * @param \Drupal\simple_oauth\KnownClientsRepositoryInterface $known_clients_repository
+   *   The known client repository service.
    */
-  public function __construct(EntityTypeManagerInterface $entity_type_manager, HttpMessageFactoryInterface $message_factory, HttpFoundationFactoryInterface $foundation_factory, Oauth2GrantManagerInterface $grant_manager) {
+  public function __construct(EntityTypeManagerInterface $entity_type_manager, HttpMessageFactoryInterface $message_factory, HttpFoundationFactoryInterface $foundation_factory, Oauth2GrantManagerInterface $grant_manager, ConfigFactoryInterface $config_factory, KnownClientsRepositoryInterface $known_clients_repository) {
     $this->entityTypeManager = $entity_type_manager;
     $this->messageFactory = $message_factory;
     $this->foundationFactory = $foundation_factory;
     $this->grantManager = $grant_manager;
+    $this->configFactory = $config_factory;
+    $this->knownClientRepository = $known_clients_repository;
   }
 
   /**
@@ -67,7 +97,9 @@ public static function create(ContainerInterface $container) {
       $container->get('entity_type.manager'),
       $container->get('psr7.http_message_factory'),
       $container->get('psr7.http_foundation_factory'),
-      $container->get('plugin.manager.oauth2_grant.processor')
+      $container->get('plugin.manager.oauth2_grant.processor'),
+      $container->get('config.factory'),
+      $container->get('simple_oauth.known_clients')
     );
   }
 
@@ -212,6 +244,14 @@ public function submitForm(array &$form, FormStateInterface $form_state) {
         $response->getHeaders()
       );
       $form_state->setResponse($redirect_response);
+
+      $scopes = array_map(function (ScopeEntityInterface $scope) {
+        return $scope->getIdentifier();
+      }, $auth_request->getScopes());
+
+      if ($this->configFactory->get('simple_oauth.settings')->get('remember_clients')) {
+        $this->knownClientRepository->rememberClient($this->currentUser()->id(), $auth_request->getClient()->getIdentifier(), $scopes);
+      }
     }
     elseif ($params = $form_state->getValue('redirect_params')) {
       $url = Url::fromRoute('user.login');
diff --git a/docroot/modules/contrib/simple_oauth/simple_oauth_extras/tests/simple_oauth_extras_test/simple_oauth_extras_test.info.yml b/docroot/modules/contrib/simple_oauth/simple_oauth_extras/tests/simple_oauth_extras_test/simple_oauth_extras_test.info.yml
index 3e59ee186..e6286f116 100644
--- a/docroot/modules/contrib/simple_oauth/simple_oauth_extras/tests/simple_oauth_extras_test/simple_oauth_extras_test.info.yml
+++ b/docroot/modules/contrib/simple_oauth/simple_oauth_extras/tests/simple_oauth_extras_test/simple_oauth_extras_test.info.yml
@@ -7,8 +7,8 @@ hidden: true
 dependencies:
   - simple_oauth_extras
 
-# Information added by Drupal.org packaging script on 2018-04-20
-version: '8.x-3.6'
+# Information added by Drupal.org packaging script on 2018-05-04
+version: '8.x-3.8'
 core: '8.x'
 project: 'simple_oauth'
-datestamp: 1524208686
+datestamp: 1525410491
diff --git a/docroot/modules/contrib/simple_oauth/simple_oauth_extras/tests/src/Functional/AuthCodeFunctionalTest.php b/docroot/modules/contrib/simple_oauth/simple_oauth_extras/tests/src/Functional/AuthCodeFunctionalTest.php
index 3550c54b6..5fb9ef76a 100644
--- a/docroot/modules/contrib/simple_oauth/simple_oauth_extras/tests/src/Functional/AuthCodeFunctionalTest.php
+++ b/docroot/modules/contrib/simple_oauth/simple_oauth_extras/tests/src/Functional/AuthCodeFunctionalTest.php
@@ -80,8 +80,8 @@ public function testAuthCodeGrant() {
       'query' => $valid_params,
     ]);
     $assert_session = $this->assertSession();
-    $assert_session->buttonExists(t('Login'));
-    $assert_session->responseContains(t('An external client application is requesting access'));
+    $assert_session->buttonExists('Login');
+    $assert_session->responseContains('An external client application is requesting access');
 
     // 2. Log the user in and try again.
     $this->drupalLogin($this->user);
@@ -119,8 +119,8 @@ public function testNon3rdPartyClientAuthCodeGrant() {
       'query' => $valid_params,
     ]);
     $assert_session = $this->assertSession();
-    $assert_session->buttonExists(t('Login'));
-    $assert_session->responseContains(t('An external client application is requesting access'));
+    $assert_session->buttonExists('Login');
+    $assert_session->responseContains('An external client application is requesting access');
 
     // 2. Log the user in and try again. This time we should get a code
     // immediately without granting, because the consumer is not 3rd party.
@@ -140,6 +140,85 @@ public function testNon3rdPartyClientAuthCodeGrant() {
     $this->assertValidTokenResponse($response, TRUE);
   }
 
+  /**
+   * Tests the remember client functionality.
+   */
+  public function testRememberClient() {
+    $valid_params = [
+      'response_type' => 'code',
+      'client_id' => $this->client->uuid(),
+      'client_secret' => $this->clientSecret,
+    ];
+    // 1. Anonymous request invites the user to log in.
+    $this->drupalGet($this->authorizeUrl->toString(), [
+      'query' => $valid_params,
+    ]);
+    $assert_session = $this->assertSession();
+    $assert_session->buttonExists('Login');
+    $assert_session->responseContains('An external client application is requesting access');
+
+    // 2. Log the user in and try again.
+    $this->drupalLogin($this->user);
+    $this->drupalGet($this->authorizeUrl->toString(), [
+      'query' => $valid_params,
+    ]);
+    $this->assertGrantForm();
+
+    // 3. Grant access by submitting the form and get the token back.
+    $this->drupalPostForm(NULL, [], 'Grant');
+
+    // Store the code for the second part of the flow.
+    $code = $this->getAndValidateCodeFromResponse();
+
+    // 4. Send the code to get the access token.
+    $response = $this->postGrantedCodeWithScopes($code, $this->scope);
+    $this->assertValidTokenResponse($response, TRUE);
+
+    // Do a second authorize request, the client is now remembered and the user
+    // does not need to confirm again.
+    $this->drupalGet($this->authorizeUrl->toString(), [
+      'query' => $valid_params,
+    ]);
+
+    $code = $this->getAndValidateCodeFromResponse();
+
+    $response = $this->postGrantedCodeWithScopes($code, $this->scope);
+    $this->assertValidTokenResponse($response, TRUE);
+
+    // Do a third request with an additional scope.
+    $valid_params['scope'] = $this->extraRole->id();
+    $this->drupalGet($this->authorizeUrl->toString(), [
+      'query' => $valid_params,
+    ]);
+
+    $this->assertGrantForm();
+    $this->assertSession()->pageTextContains($this->extraRole->label());
+    $this->drupalPostForm(NULL, [], 'Grant');
+
+    $code = $this->getAndValidateCodeFromResponse();
+
+    $response = $this->postGrantedCodeWithScopes($code, $this->scope . ' ' . $this->extraRole->id());
+    $this->assertValidTokenResponse($response, TRUE);
+
+    // Do another request with the additional scope, this scope is now remembered too.
+    $valid_params['scope'] = $this->extraRole->id();
+    $this->drupalGet($this->authorizeUrl->toString(), [
+      'query' => $valid_params,
+    ]);
+    $code = $this->getAndValidateCodeFromResponse();
+
+    $response = $this->postGrantedCodeWithScopes($code, $this->scope . ' ' . $this->extraRole->id());
+    $this->assertValidTokenResponse($response, TRUE);
+
+    // Disable the remember clients feature, make sure that the redirect doesn't happen automatically anymore.
+    $this->config('simple_oauth.settings')->set('remember_clients', FALSE)->save();
+
+    $this->drupalGet($this->authorizeUrl->toString(), [
+      'query' => $valid_params,
+    ]);
+
+    $this->assertGrantForm();
+  }
 
   /**
    * Helper function to assert the current page is a valid grant form.
diff --git a/docroot/modules/contrib/simple_oauth/simple_oauth_extras/tests/src/Functional/ClientCredentialsFunctionalTest.php b/docroot/modules/contrib/simple_oauth/simple_oauth_extras/tests/src/Functional/ClientCredentialsFunctionalTest.php
index d99fc7606..2c4a5687d 100644
--- a/docroot/modules/contrib/simple_oauth/simple_oauth_extras/tests/src/Functional/ClientCredentialsFunctionalTest.php
+++ b/docroot/modules/contrib/simple_oauth/simple_oauth_extras/tests/src/Functional/ClientCredentialsFunctionalTest.php
@@ -71,7 +71,7 @@ public function testMissingClientCredentialsGrant() {
       $response = $this->request('POST', $this->url, [
         'form_params' => $invalid_payload,
       ]);
-      $parsed_response = Json::decode($response->getBody()->getContents());
+      $parsed_response = Json::decode((string) $response->getBody());
       $this->assertSame($value['error'], $parsed_response['error'], sprintf('Correct error code %s for %s.', $value['error'], $key));
       $this->assertSame($value['code'], $response->getStatusCode(), sprintf('Correct status code %d for %s.', $value['code'], $key));
     }
@@ -108,7 +108,7 @@ public function testInvalidClientCredentialsGrant() {
       $response = $this->request('POST', $this->url, [
         'form_params' => $invalid_payload,
       ]);
-      $parsed_response = Json::decode($response->getBody()->getContents());
+      $parsed_response = Json::decode((string) $response->getBody());
       $this->assertSame($value['error'], $parsed_response['error'], sprintf('Correct error code %s for %s.', $value['error'], $key));
       $this->assertSame($value['code'], $response->getStatusCode(), sprintf('Correct status code %d for %s.', $value['code'], $key));
     }
diff --git a/docroot/modules/contrib/simple_oauth/simple_oauth_extras/tests/src/Functional/ImplicitFunctionalTest.php b/docroot/modules/contrib/simple_oauth/simple_oauth_extras/tests/src/Functional/ImplicitFunctionalTest.php
index 53cf7c17c..16f8d4429 100644
--- a/docroot/modules/contrib/simple_oauth/simple_oauth_extras/tests/src/Functional/ImplicitFunctionalTest.php
+++ b/docroot/modules/contrib/simple_oauth/simple_oauth_extras/tests/src/Functional/ImplicitFunctionalTest.php
@@ -57,8 +57,8 @@ public function testImplicitGrant() {
       'query' => $valid_params,
     ]);
     $assert_session = $this->assertSession();
-    $assert_session->buttonExists(t('Login'));
-    $assert_session->responseContains(t('An external client application is requesting access'));
+    $assert_session->buttonExists('Login');
+    $assert_session->responseContains('An external client application is requesting access');
 
     // 2. Log the user in and try again.
     $this->drupalLogin($this->user);
@@ -105,8 +105,8 @@ public function testValidClientImplicitGrant() {
       'query' => $valid_params,
     ]);
     $assert_session = $this->assertSession();
-    $assert_session->buttonExists(t('Login'));
-    $assert_session->responseContains(t('An external client application is requesting access'));
+    $assert_session->buttonExists('Login');
+    $assert_session->responseContains('An external client application is requesting access');
 
     // 2. Log the user in and try again.
     $this->drupalLogin($this->user);
diff --git a/docroot/modules/contrib/simple_oauth/simple_oauth_extras/tests/src/Functional/RefreshFunctionalTest.php b/docroot/modules/contrib/simple_oauth/simple_oauth_extras/tests/src/Functional/RefreshFunctionalTest.php
index bb46c9994..489d2dd5a 100644
--- a/docroot/modules/contrib/simple_oauth/simple_oauth_extras/tests/src/Functional/RefreshFunctionalTest.php
+++ b/docroot/modules/contrib/simple_oauth/simple_oauth_extras/tests/src/Functional/RefreshFunctionalTest.php
@@ -39,7 +39,7 @@ protected function setUp() {
     $response = $this->request('POST', $this->url, [
       'form_params' => $valid_payload,
     ]);
-    $body = $response->getBody()->getContents();
+    $body = (string) $response->getBody();
     $parsed_response = Json::decode($body);
     $this->refreshToken = $parsed_response['refresh_token'];
   }
@@ -64,7 +64,7 @@ public function testRefreshGrant() {
     // 2. Test the valid without scopes.
     // We need to use the new refresh token, the old one is revoked.
     $response->getBody()->rewind();
-    $parsed_response = Json::decode($response->getBody()->getContents());
+    $parsed_response = Json::decode((string) $response->getBody());
     $valid_payload = [
       'grant_type' => 'refresh_token',
       'client_id' => $this->client->uuid(),
@@ -87,7 +87,7 @@ public function testRefreshGrant() {
     $response = $this->request('POST', $this->url, [
       'form_params' => $valid_payload,
     ]);
-    $parsed_response = Json::decode($response->getBody()->getContents());
+    $parsed_response = Json::decode((string) $response->getBody());
     $this->assertSame(401, $response->getStatusCode());
     $this->assertSame('invalid_request', $parsed_response['error']);
   }
@@ -128,7 +128,7 @@ public function testMissingRefreshGrant() {
       $response = $this->request('POST', $this->url, [
         'form_params' => $invalid_payload,
       ]);
-      $parsed_response = Json::decode($response->getBody()->getContents());
+      $parsed_response = Json::decode((string) $response->getBody());
       $this->assertSame($value['error'], $parsed_response['error'], sprintf('Correct error code %s for %s.', $value['error'], $key));
       $this->assertSame($value['code'], $response->getStatusCode(), sprintf('Correct status code %d for %s.', $value['code'], $key));
     }
@@ -170,7 +170,7 @@ public function testInvalidRefreshGrant() {
       $response = $this->request('POST', $this->url, [
         'form_params' => $invalid_payload,
       ]);
-      $parsed_response = Json::decode($response->getBody()->getContents());
+      $parsed_response = Json::decode((string) $response->getBody());
       $this->assertSame($value['error'], $parsed_response['error'], sprintf('Correct error code %s for %s.', $value['error'], $key));
       $this->assertSame($value['code'], $response->getStatusCode(), sprintf('Correct status code %d for %s.', $value['code'], $key));
     }
diff --git a/docroot/modules/contrib/simple_oauth/simple_oauth_extras/tests/src/Functional/RolesNegotiationFunctionalTest.php b/docroot/modules/contrib/simple_oauth/simple_oauth_extras/tests/src/Functional/RolesNegotiationFunctionalTest.php
index 884a72e25..662407bfd 100644
--- a/docroot/modules/contrib/simple_oauth/simple_oauth_extras/tests/src/Functional/RolesNegotiationFunctionalTest.php
+++ b/docroot/modules/contrib/simple_oauth/simple_oauth_extras/tests/src/Functional/RolesNegotiationFunctionalTest.php
@@ -7,6 +7,7 @@
 use Drupal\consumers\Entity\Consumer;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\simple_oauth\Functional\RequestHelperTrait;
+use Drupal\Tests\simple_oauth\Functional\SimpleOauthTestTrait;
 use Drupal\user\Entity\Role;
 
 /**
@@ -15,6 +16,7 @@
 class RolesNegotiationFunctionalTest extends BrowserTestBase {
 
   use RequestHelperTrait;
+  use SimpleOauthTestTrait;
 
   public static $modules = [
     'image',
@@ -50,16 +52,6 @@ class RolesNegotiationFunctionalTest extends BrowserTestBase {
    */
   protected $httpClient;
 
-  /**
-   * @var string
-   */
-  protected $privateKeyPath;
-
-  /**
-   * @var string
-   */
-  protected $publicKeyPath;
-
   /**
    * @var string
    */
@@ -115,23 +107,7 @@ public function setUp() {
     ]);
     $this->client->save();
 
-    // Configure the public and private keys.
-    $path = $this->container->get('module_handler')
-      ->getModule('simple_oauth')
-      ->getPath();
-    $temp_dir = sys_get_temp_dir();
-    $public_path = '/' . $path . '/tests/certificates/public.key';
-    $private_path = '/' . $path . '/tests/certificates/private.key';
-    file_put_contents($temp_dir . '/public.key', file_get_contents(DRUPAL_ROOT . $public_path));
-    file_put_contents($temp_dir . '/private.key', file_get_contents(DRUPAL_ROOT . $private_path));
-    chmod($temp_dir . '/public.key', 0660);
-    chmod($temp_dir . '/private.key', 0660);
-    $this->publicKeyPath = $temp_dir . '/public.key';
-    $this->privateKeyPath = $temp_dir . '/private.key';
-    $settings = $this->config('simple_oauth.settings');
-    $settings->set('public_key', $this->publicKeyPath);
-    $settings->set('private_key', $this->privateKeyPath);
-    $settings->save();
+    $this->setUpKeys();
   }
 
   /**
@@ -151,7 +127,7 @@ public function testRequestWithRoleRemovedFromUser() {
         ],
       ]
     );
-    $parsed_response = Json::decode($response->getBody()->getContents());
+    $parsed_response = Json::decode((string) $response->getBody());
     $this->assertEquals($this->user->id(), $parsed_response['id']);
     $this->assertEquals(['foo', 'bar', 'authenticated', 'oof'], $parsed_response['roles']);
     $this->assertTrue($parsed_response['permissions']['view own simple_oauth entities']['access']);
@@ -173,7 +149,7 @@ public function testRequestWithRoleRemovedFromUser() {
         ],
       ]
     );
-    $parsed_response = Json::decode($response->getBody()->getContents());
+    $parsed_response = Json::decode((string) $response->getBody());
     // The token was successfully removed. The negotiated user is the anonymous
     // user.
     $this->assertEquals(0, $parsed_response['id']);
@@ -194,7 +170,7 @@ public function testRequestWithRoleRemovedFromUser() {
         ],
       ]
     );
-    $parsed_response = Json::decode($response->getBody()->getContents());
+    $parsed_response = Json::decode((string) $response->getBody());
     // The negotiated user is the expected user.
     $this->assertEquals($this->user->id(), $parsed_response['id']);
     $this->assertEquals(['foo', 'authenticated', 'oof'], $parsed_response['roles']);
@@ -219,7 +195,7 @@ public function testRequestWithRoleRemovedFromClient() {
         ],
       ]
     );
-    $parsed_response = Json::decode($response->getBody()->getContents());
+    $parsed_response = Json::decode((string) $response->getBody());
     $this->assertEquals($this->user->id(), $parsed_response['id']);
     $this->assertEquals(['authenticated', 'oof'], $parsed_response['roles']);
     $this->assertTrue($parsed_response['permissions']['delete own simple_oauth entities']['access']);
@@ -241,7 +217,7 @@ public function testRequestWithRoleRemovedFromClient() {
         ],
       ]
     );
-    $parsed_response = Json::decode($response->getBody()->getContents());
+    $parsed_response = Json::decode((string) $response->getBody());
     // The token was successfully removed. The negotiated user is the anonymous
     // user.
     $this->assertEquals(0, $parsed_response['id']);
@@ -260,7 +236,7 @@ public function testRequestWithRoleRemovedFromClient() {
         ],
       ]
     );
-    $parsed_response = Json::decode($response->getBody()->getContents());
+    $parsed_response = Json::decode((string) $response->getBody());
     $this->assertEquals($this->user->id(), $parsed_response['id']);
     $this->assertEquals(['authenticated'], $parsed_response['roles']);
     $this->assertFalse($parsed_response['permissions']['delete own simple_oauth entities']['access']);
@@ -282,7 +258,7 @@ public function testRequestWithMissingScope() {
         ],
       ]
     );
-    $parsed_response = Json::decode($response->getBody()->getContents());
+    $parsed_response = Json::decode((string) $response->getBody());
     $this->assertEquals($this->user->id(), $parsed_response['id']);
     $this->assertEquals(['authenticated', 'oof'], $parsed_response['roles']);
     $this->assertFalse($parsed_response['permissions']['view own simple_oauth entities']['access']);
@@ -311,7 +287,7 @@ private function getAccessToken(array $scopes = []) {
       $this->url,
       ['form_params' => $valid_payload]
     );
-    $parsed_response = Json::decode($response->getBody()->getContents());
+    $parsed_response = Json::decode((string) $response->getBody());
 
     return $parsed_response['access_token'];
   }
diff --git a/docroot/modules/contrib/simple_oauth/src/Authentication/TokenAuthUser.php b/docroot/modules/contrib/simple_oauth/src/Authentication/TokenAuthUser.php
index 3d4c3360e..0a4d9495f 100644
--- a/docroot/modules/contrib/simple_oauth/src/Authentication/TokenAuthUser.php
+++ b/docroot/modules/contrib/simple_oauth/src/Authentication/TokenAuthUser.php
@@ -47,8 +47,10 @@ class TokenAuthUser implements TokenAuthUserInterface {
    */
   public function __construct(Oauth2TokenInterface $token) {
     $this->consumer = $token->get('client')->entity;
-    $this->subject = $token->get('auth_user_id')->entity ?: $this->consumer;
 
+    if (!$this->subject = $token->get('auth_user_id')->entity) {
+      $this->subject = $this->consumer->get('user_id')->entity;
+    }
     if (!$this->subject) {
       throw OAuthServerException::invalidClient();
     }
diff --git a/docroot/modules/contrib/simple_oauth/src/Entity/Form/Oauth2TokenDeleteForm.php b/docroot/modules/contrib/simple_oauth/src/Entity/Form/Oauth2TokenDeleteForm.php
index 0e3386c1e..75189b0d7 100644
--- a/docroot/modules/contrib/simple_oauth/src/Entity/Form/Oauth2TokenDeleteForm.php
+++ b/docroot/modules/contrib/simple_oauth/src/Entity/Form/Oauth2TokenDeleteForm.php
@@ -2,9 +2,14 @@
 
 namespace Drupal\simple_oauth\Entity\Form;
 
+use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
+use Drupal\Core\Entity\EntityManagerInterface;
+use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\Url;
+use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
  * Provides a form for deleting Access Token entities.
@@ -13,6 +18,42 @@
  */
 class Oauth2TokenDeleteForm extends ContentEntityConfirmFormBase {
 
+  /**
+   * The messenger service.
+   *
+   * @var \Drupal\Core\Messenger\MessengerInterface
+   */
+  protected $messenger;
+
+  /**
+   * Constructs a ContentEntityForm object.
+   *
+   * @param \Drupal\Core\Entity\EntityManagerInterface $entity_manager
+   *   The entity manager.
+   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   *   The entity type bundle service.
+   * @param \Drupal\Component\Datetime\TimeInterface $time
+   *   The time service.
+   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   *   The messenger service.
+   */
+  public function __construct(EntityManagerInterface $entity_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, TimeInterface $time = NULL, MessengerInterface $messenger) {
+    parent::__construct($entity_manager, $entity_type_bundle_info, $time);
+    $this->messenger = $messenger;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container) {
+    return new static(
+      $container->get('entity.manager'),
+      $container->get('entity_type.bundle.info'),
+      $container->get('datetime.time'),
+      $container->get('messenger')
+    );
+  }
+
   /**
    * {@inheritdoc}
    */
@@ -40,7 +81,7 @@ public function getConfirmText() {
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $this->entity->delete();
 
-    drupal_set_message(
+    $this->messenger->addMessage(
       $this->t('content @type: deleted @label.',
         [
           '@type' => $this->entity->bundle(),
diff --git a/docroot/modules/contrib/simple_oauth/src/Entity/Form/Oauth2TokenSettingsForm.php b/docroot/modules/contrib/simple_oauth/src/Entity/Form/Oauth2TokenSettingsForm.php
index b190c7a3a..4370c9252 100644
--- a/docroot/modules/contrib/simple_oauth/src/Entity/Form/Oauth2TokenSettingsForm.php
+++ b/docroot/modules/contrib/simple_oauth/src/Entity/Form/Oauth2TokenSettingsForm.php
@@ -5,6 +5,7 @@
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\Url;
 use Drupal\simple_oauth\Service\Filesystem\FilesystemInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -19,14 +20,28 @@ class Oauth2TokenSettingsForm extends ConfigFormBase {
    */
   protected $fileSystem;
 
+  /**
+   * The messenger service.
+   *
+   * @var \Drupal\Core\Messenger\MessengerInterface
+   */
+  protected $messenger;
+
+
   /**
    * Oauth2TokenSettingsForm constructor.
    *
-   * @param \Drupal\simple_oauth\Service\Filesystem\FilesystemInterface $filesystem
+   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   *   The factory for configuration objects.
+   * @param \Drupal\simple_oauth\Service\Filesystem\FilesystemInterface $fileSystem
+   *   The simple_oauth.filesystem service.
+   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   *   The messenger service.
    */
-  public function __construct(ConfigFactoryInterface $configFactory, FilesystemInterface $file_system) {
+  public function __construct(ConfigFactoryInterface $configFactory, FilesystemInterface $fileSystem, MessengerInterface $messenger) {
     parent::__construct($configFactory);
-    $this->fileSystem = $file_system;
+    $this->fileSystem = $fileSystem;
+    $this->messenger = $messenger;
   }
 
   /**
@@ -35,7 +50,8 @@ public function __construct(ConfigFactoryInterface $configFactory, FilesystemInt
   public static function create(ContainerInterface $container) {
     return new static(
       $container->get('config.factory'),
-      $container->get('simple_oauth.filesystem')
+      $container->get('simple_oauth.filesystem'),
+      $container->get('messenger')
     );
   }
 
@@ -70,6 +86,7 @@ public function submitForm(array &$form, FormStateInterface $form_state) {
     $settings->set('refresh_token_expiration', $form_state->getValue('refresh_token_expiration'));
     $settings->set('public_key', $form_state->getValue('public_key'));
     $settings->set('private_key', $form_state->getValue('private_key'));
+    $settings->set('remember_clients', $form_state->getValue('remember_clients'));
     $settings->save();
     parent::submitForm($form, $form_state);
   }
@@ -86,26 +103,24 @@ public function submitForm(array &$form, FormStateInterface $form_state) {
    *   Form definition array.
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
+    $config = $this->config('simple_oauth.settings');
     $form['access_token_expiration'] = [
       '#type' => 'number',
       '#title' => $this->t('Access token expiration time'),
       '#description' => $this->t('The default value, in seconds, to be used as expiration time when creating new tokens.'),
-      '#default_value' => $this->config('simple_oauth.settings')
-        ->get('access_token_expiration'),
+      '#default_value' => $config->get('access_token_expiration'),
     ];
     $form['refresh_token_expiration'] = [
       '#type' => 'number',
       '#title' => $this->t('Refresh token expiration time'),
       '#description' => $this->t('The default value, in seconds, to be used as expiration time when creating new tokens.'),
-      '#default_value' => $this->config('simple_oauth.settings')
-        ->get('refresh_token_expiration'),
+      '#default_value' => $config->get('refresh_token_expiration'),
     ];
     $form['public_key'] = [
       '#type' => 'textfield',
       '#title' => $this->t('Public Key'),
       '#description' => $this->t('The path to the public key file.'),
-      '#default_value' => $this->config('simple_oauth.settings')
-        ->get('public_key'),
+      '#default_value' => $config->get('public_key'),
       '#element_validate' => ['::validateExistingFile'],
       '#required' => TRUE,
       '#attributes' => ['id' => 'pubk'],
@@ -114,13 +129,19 @@ public function buildForm(array $form, FormStateInterface $form_state) {
       '#type' => 'textfield',
       '#title' => $this->t('Private Key'),
       '#description' => $this->t('The path to the private key file.'),
-      '#default_value' => $this->config('simple_oauth.settings')
-        ->get('private_key'),
+      '#default_value' => $config->get('private_key'),
       '#element_validate' => ['::validateExistingFile'],
       '#required' => TRUE,
       '#attributes' => ['id' => 'pk'],
     ];
 
+    $form['remember_clients'] = [
+      '#type' => 'checkbox',
+      '#title' => $this->t('Remember previously approved clients'),
+      '#description' => $this->t('When enabled, autorized clients will be stored and a authorization requests for the same client with previously accepted scopes will automatically be accepted.'),
+      '#default_value' => $config->get('remember_clients'),
+    ];
+
     $form['actions'] = [
       'actions' => [
         '#cache' => ['max-age' => 0],
@@ -149,7 +170,7 @@ public function buildForm(array $form, FormStateInterface $form_state) {
     }
     else {
       // Generate Notice Info Message about enabling openssl extension.
-      drupal_set_message(
+      $this->messenger->addMessage(
         $this->t('Enabling the PHP OpenSSL Extension will permit you generate the keys from this form.'),
         'warning'
       );
diff --git a/docroot/modules/contrib/simple_oauth/src/KnownClientsRepository.php b/docroot/modules/contrib/simple_oauth/src/KnownClientsRepository.php
new file mode 100644
index 000000000..c64409fcc
--- /dev/null
+++ b/docroot/modules/contrib/simple_oauth/src/KnownClientsRepository.php
@@ -0,0 +1,55 @@
+<?php
+
+namespace Drupal\simple_oauth;
+
+use Drupal\user\UserDataInterface;
+
+/**
+ * Default implementation for the known clients repository.
+ */
+class KnownClientsRepository implements KnownClientsRepositoryInterface {
+
+  /**
+   * The user data service.
+   *
+   * @var \Drupal\user\UserDataInterface
+   */
+  protected $userData;
+
+  /**
+   * KnownClientsRepository constructor.
+   *
+   * @param \Drupal\user\UserDataInterface $user_data
+   *   The user data service.
+   */
+  public function __construct(UserDataInterface $user_data) {
+    $this->userData = $user_data;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function isAuthorized($uid, $client_id, array $scopes) {
+    $name = 'client:' . $client_id;
+    $authorized_scopes = $this->userData->get('simple_oauth', $uid, $name);
+
+    // Access is allowed if all the requested scopes are part of the alrady
+    // authorized scopes.
+    if (is_array($authorized_scopes) && !array_diff($scopes, $authorized_scopes)) {
+      return TRUE;
+    }
+    return FALSE;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function rememberClient($uid, $client_id, array $scopes) {
+    $name = 'client:' . $client_id;
+    $existing_scopes = (array) $this->userData->get('simple_oauth', $uid, $name);
+
+    $scopes = array_unique(array_merge($scopes, $existing_scopes));
+    $this->userData->set('simple_oauth', $uid, $name, $scopes);
+  }
+
+}
diff --git a/docroot/modules/contrib/simple_oauth/src/KnownClientsRepositoryInterface.php b/docroot/modules/contrib/simple_oauth/src/KnownClientsRepositoryInterface.php
new file mode 100644
index 000000000..df495f8ee
--- /dev/null
+++ b/docroot/modules/contrib/simple_oauth/src/KnownClientsRepositoryInterface.php
@@ -0,0 +1,41 @@
+<?php
+
+namespace Drupal\simple_oauth;
+
+/**
+ * An interface that remembers known clients.
+ */
+interface KnownClientsRepositoryInterface {
+
+  /**
+   * Checks if a given user authorized a client for a given set of scopes.
+   *
+   * @param int $uid
+   *   The user ID.
+   * @param string $client_id
+   *   The client ID.
+   * @param string[] $scopes
+   *   List of scopes to authorize for.
+   *
+   * @return bool
+   *   TRUE if the client is authorized, FALSE otherwise.
+   *
+   */
+  public function isAuthorized($uid, $client_id, array $scopes);
+
+  /**
+   * Store a client with a set of scopes as authorized for a given user.
+   *
+   * Passed in scopes are merged with already accepted scopes for the given
+   * client.
+   *
+   * @param int $uid
+   *   The user ID.
+   * @param string $client_id
+   *   The client ID.
+   * @param string[] $scopes
+   *   List of scopes that shuld be authorized.
+   */
+  public function rememberClient($uid, $client_id, array $scopes);
+
+}
diff --git a/docroot/modules/contrib/simple_oauth/tests/src/Functional/PasswordFunctionalTest.php b/docroot/modules/contrib/simple_oauth/tests/src/Functional/PasswordFunctionalTest.php
index f5944808d..945912594 100644
--- a/docroot/modules/contrib/simple_oauth/tests/src/Functional/PasswordFunctionalTest.php
+++ b/docroot/modules/contrib/simple_oauth/tests/src/Functional/PasswordFunctionalTest.php
@@ -30,7 +30,16 @@ public function testPasswordGrant() {
     $response = $this->request('POST', $this->url, [
       'form_params' => $valid_payload,
     ]);
-    $this->assertValidTokenResponse($response, TRUE);
+    $response = $this->assertValidTokenResponse($response, TRUE);
+    // Repeat the request but pass an obtained access token as a header in
+    // order to check the authentication in parallel, which will precede
+    // the creation of a new token.
+    $this->assertValidTokenResponse($this->request('POST', $this->url, [
+      'form_params' => $valid_payload,
+      'headers' => [
+        'Authorization' => 'Bearer ' . $response['access_token'],
+      ],
+    ]), TRUE);
 
     // 2. Test the valid request without scopes.
     $payload_no_scope = $valid_payload;
@@ -95,7 +104,7 @@ public function testMissingPasswordGrant() {
       $response = $this->request('POST', $this->url, [
         'form_params' => $invalid_payload,
       ]);
-      $parsed_response = Json::decode($response->getBody()->getContents());
+      $parsed_response = Json::decode((string) $response->getBody());
       $this->assertSame($value['error'], $parsed_response['error'], sprintf('Correct error code %s for %s.', $value['error'], $key));
       $this->assertSame($value['code'], $response->getStatusCode(), sprintf('Correct status code %d for %s.', $value['code'], $key));
     }
@@ -142,7 +151,7 @@ public function testInvalidPasswordGrant() {
       $response = $this->request('POST', $this->url, [
         'form_params' => $invalid_payload,
       ]);
-      $parsed_response = Json::decode($response->getBody()->getContents());
+      $parsed_response = Json::decode((string) $response->getBody());
       $this->assertSame($value['error'], $parsed_response['error'], sprintf('Correct error code %s for %s.', $value['error'], $key));
       $this->assertSame($value['code'], $response->getStatusCode(), sprintf('Correct status code %d for %s.', $value['code'], $key));
     }
diff --git a/docroot/modules/contrib/simple_oauth/tests/src/Functional/SimpleOauthTestTrait.php b/docroot/modules/contrib/simple_oauth/tests/src/Functional/SimpleOauthTestTrait.php
new file mode 100644
index 000000000..47adcd553
--- /dev/null
+++ b/docroot/modules/contrib/simple_oauth/tests/src/Functional/SimpleOauthTestTrait.php
@@ -0,0 +1,36 @@
+<?php
+
+namespace Drupal\Tests\simple_oauth\Functional;
+
+/**
+ * Trait with methods needed by tests.
+ */
+trait SimpleOauthTestTrait {
+
+  /**
+   * Set up public and private keys.
+   */
+  public function setUpKeys() {
+    $path = $this->container->get('module_handler')->getModule('simple_oauth')->getPath();
+
+    $public_key_path = 'private:///public.key';
+    $private_key_path = 'private:///private.key';
+
+    $source_public_key_path = '/' . $path . '/tests/certificates/public.key';
+    $source_private_key_path = '/' . $path . '/tests/certificates/private.key';
+    file_put_contents($public_key_path, file_get_contents(DRUPAL_ROOT . $source_public_key_path));
+    file_put_contents($private_key_path, file_get_contents(DRUPAL_ROOT . $source_private_key_path));
+    chmod($public_key_path, 0660);
+    chmod($private_key_path, 0660);
+
+    /** @var \Drupal\Core\File\FileSystemInterface $filesystem */
+    $filesystem = \Drupal::service('file_system');
+
+    $settings = $this->config('simple_oauth.settings');
+    $settings->set('public_key', $filesystem->realpath($public_key_path));
+    $settings->set('private_key', $filesystem->realpath($private_key_path));
+    $settings->save();
+
+  }
+
+}
diff --git a/docroot/modules/contrib/simple_oauth/tests/src/Functional/TokenBearerFunctionalTestBase.php b/docroot/modules/contrib/simple_oauth/tests/src/Functional/TokenBearerFunctionalTestBase.php
index 303ada414..fff45f310 100644
--- a/docroot/modules/contrib/simple_oauth/tests/src/Functional/TokenBearerFunctionalTestBase.php
+++ b/docroot/modules/contrib/simple_oauth/tests/src/Functional/TokenBearerFunctionalTestBase.php
@@ -20,6 +20,7 @@
 abstract class TokenBearerFunctionalTestBase extends BrowserTestBase {
 
   use RequestHelperTrait;
+  use SimpleOauthTestTrait;
 
   public static $modules = [
     'image',
@@ -59,16 +60,6 @@
    */
   protected $additionalRoles;
 
-  /**
-   * @var string
-   */
-  protected $privateKeyPath;
-
-  /**
-   * @var string
-   */
-  protected $publicKeyPath;
-
   /**
    * @var string
    */
@@ -80,8 +71,6 @@
   protected function setUp() {
     parent::setUp();
 
-    $this->htmlOutputEnabled = FALSE;
-
     $this->url = Url::fromRoute('oauth2_token.token');
 
     // Set up a HTTP client that accepts relative URLs.
@@ -126,21 +115,7 @@ protected function setUp() {
       'access content',
     ]);
 
-    // Use the public and private keys.
-    $path = $this->container->get('module_handler')->getModule('simple_oauth')->getPath();
-    $temp_dir = sys_get_temp_dir();
-    $public_path = '/' . $path . '/tests/certificates/public.key';
-    $private_path = '/' . $path . '/tests/certificates/private.key';
-    file_put_contents($temp_dir . '/public.key', file_get_contents(DRUPAL_ROOT . $public_path));
-    file_put_contents($temp_dir . '/private.key', file_get_contents(DRUPAL_ROOT . $private_path));
-    chmod($temp_dir . '/public.key', 0660);
-    chmod($temp_dir . '/private.key', 0660);
-    $this->publicKeyPath = $temp_dir . '/public.key';
-    $this->privateKeyPath = $temp_dir . '/private.key';
-    $settings = $this->config('simple_oauth.settings');
-    $settings->set('public_key', $this->publicKeyPath);
-    $settings->set('private_key', $this->privateKeyPath);
-    $settings->save();
+    $this->setUpKeys();
 
     $num_roles = mt_rand(1, count($this->additionalRoles));
     $requested_roles = array_slice($this->additionalRoles, 0, $num_roles);
@@ -159,10 +134,13 @@ protected function setUp() {
    *   The response object.
    * @param bool $has_refresh
    *   TRUE if the response should return a refresh token. FALSE otherwise.
+   *
+   * @return array
+   *   An array representing the response of "/oauth/token".
    */
   protected function assertValidTokenResponse(ResponseInterface $response, $has_refresh = FALSE) {
     $this->assertEquals(200, $response->getStatusCode());
-    $parsed_response = Json::decode($response->getBody()->getContents());
+    $parsed_response = Json::decode((string) $response->getBody());
     $this->assertSame('Bearer', $parsed_response['token_type']);
     $expiration = $this->config('simple_oauth.settings')->get('access_token_expiration');
     $this->assertLessThanOrEqual($expiration, $parsed_response['expires_in']);
@@ -172,8 +150,10 @@ protected function assertValidTokenResponse(ResponseInterface $response, $has_re
       $this->assertNotEmpty($parsed_response['refresh_token']);
     }
     else {
-      $this->assertTrue(empty($parsed_response['refresh_token']));
+      $this->assertFalse(isset($parsed_response['refresh_token']));
     }
+
+    return $parsed_response;
   }
 
 }
diff --git a/docroot/sites/default/settings.local.php b/docroot/sites/default/settings.local.php
index 642473ba7..7ea1d4bd5 100644
--- a/docroot/sites/default/settings.local.php
+++ b/docroot/sites/default/settings.local.php
@@ -1,12 +1,13 @@
 <?php
  
 $databases['default']['default'] = array (
- 'database' => 'drupal8',
- 'username' => 'drupal8',
- 'password' => 'drupal8',
+ 'database' => 'drupal',
+ 'username' => 'dbuser',
+ 'password' => 'dbpassword',
  'prefix' => '',
  'host' => 'database',
  'port' => '3306',
  'namespace' => 'Drupal\\Core\\Database\\Driver\\mysql',
  'driver' => 'mysql',
 );
+
diff --git a/docroot/sites/default/settings.php b/docroot/sites/default/settings.php
old mode 100644
new mode 100755
index 235fb472f..de3157aa3
--- a/docroot/sites/default/settings.php
+++ b/docroot/sites/default/settings.php
@@ -15,15 +15,15 @@
  $settings['file_private_path'] = '{PATH}';
 }
 $databases['default']['default'] = array (
-  'database' => 'drupal8',
-  'username' => 'drupal8',
-  'password' => 'drupal8',
+  'database' => 'drupal',
+  'username' => 'dbuser',
+  'password' => 'dbpassword',
   'prefix' => '',
   'host' => 'database',
   'port' => '3306',
   'namespace' => 'Drupal\\Core\\Database\\Driver\\mysql',
   'driver' => 'mysql',
 );
-$settings['hash_salt'] = 'WWO2dZEE7qIQ6lcTNrUICyIHt0-2F-pqOwC0icVDNs05QHR2MXi_gsg9qrSLR5SiEVNWD90reA';
+$settings['hash_salt'] = '2VIDaGf3cRvM2_mLz-xWxtpx48Y_Ow7Ljo0GFCvrkq1qdIRfuc8PnxyqZV0IiJFEUJ8jQcreew';
 $settings['install_profile'] = 'lightning_commerce';
-$config_directories['sync'] = 'sites/default/files/config_CvO6KUaG_FV89pWdTV62jAk9d1Xnbkuk6fxHzFM3Vf4C8_FoPqAdrZdWL-_a43Eq9-cNiWZ3Ug/sync';
+$config_directories['sync'] = 'sites/default/files/config_-HGZuCJrkhRaKGCgpjmpFKGzkY8bTCLmvJaQlFQs7uYDI2IuQ-oPjkWt5MUE4l7h6EYntAwSbA/sync';
